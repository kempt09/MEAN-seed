{"version":3,"sources":["angular-sanitize.js"],"names":[],"mappings":"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","file":"angular-sanitize-compiled.js","sourcesContent":["/**\n * @license AngularJS v1.5.0\n * (c) 2010-2016 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n *     Any commits to this file should be reviewed with security in mind.  *\n *   Changes to this file can potentially create security vulnerabilities. *\n *          An approval from 2 Core members with history of modifying      *\n *                         this file is required.                          *\n *                                                                         *\n *  Does the change somehow allow for arbitrary javascript to be executed? *\n *    Or allows for someone to change the prototype of built-in objects?   *\n *     Or gives undesired access to variables likes document or window?    *\n * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n\nvar $sanitizeMinErr = angular.$$minErr('$sanitize');\n\n/**\n * @ngdoc module\n * @name ngSanitize\n * @description\n *\n * # ngSanitize\n *\n * The `ngSanitize` module provides functionality to sanitize HTML.\n *\n *\n * <div doc-module-components=\"ngSanitize\"></div>\n *\n * See {@link ngSanitize.$sanitize `$sanitize`} for usage.\n */\n\n/**\n * @ngdoc service\n * @name $sanitize\n * @kind function\n *\n * @description\n *   Sanitizes an html string by stripping all potentially dangerous tokens.\n *\n *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are\n *   then serialized back to properly escaped html string. This means that no unsafe input can make\n *   it into the returned string.\n *\n *   The whitelist for URL sanitization of attribute values is configured using the functions\n *   `aHrefSanitizationWhitelist` and `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider\n *   `$compileProvider`}.\n *\n *   The input may also contain SVG markup if this is enabled via {@link $sanitizeProvider}.\n *\n * @param {string} html HTML input.\n * @returns {string} Sanitized HTML.\n *\n * @example\n   <example module=\"sanitizeExample\" deps=\"angular-sanitize.js\">\n   <file name=\"index.html\">\n     <script>\n         angular.module('sanitizeExample', ['ngSanitize'])\n           .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {\n             $scope.snippet =\n               '<p style=\"color:blue\">an html\\n' +\n               '<em onmouseover=\"this.textContent=\\'PWN3D!\\'\">click here</em>\\n' +\n               'snippet</p>';\n             $scope.deliberatelyTrustDangerousSnippet = function() {\n               return $sce.trustAsHtml($scope.snippet);\n             };\n           }]);\n     </script>\n     <div ng-controller=\"ExampleController\">\n        Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <td>Directive</td>\n           <td>How</td>\n           <td>Source</td>\n           <td>Rendered</td>\n         </tr>\n         <tr id=\"bind-html-with-sanitize\">\n           <td>ng-bind-html</td>\n           <td>Automatically uses $sanitize</td>\n           <td><pre>&lt;div ng-bind-html=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind-html=\"snippet\"></div></td>\n         </tr>\n         <tr id=\"bind-html-with-trust\">\n           <td>ng-bind-html</td>\n           <td>Bypass $sanitize by explicitly trusting the dangerous value</td>\n           <td>\n           <pre>&lt;div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"&gt;\n&lt;/div&gt;</pre>\n           </td>\n           <td><div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"></div></td>\n         </tr>\n         <tr id=\"bind-default\">\n           <td>ng-bind</td>\n           <td>Automatically escapes</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n       </div>\n   </file>\n   <file name=\"protractor.js\" type=\"protractor\">\n     it('should sanitize the html snippet by default', function() {\n       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).\n         toBe('<p>an html\\n<em>click here</em>\\nsnippet</p>');\n     });\n\n     it('should inline raw snippet if bound to a trusted value', function() {\n       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).\n         toBe(\"<p style=\\\"color:blue\\\">an html\\n\" +\n              \"<em onmouseover=\\\"this.textContent='PWN3D!'\\\">click here</em>\\n\" +\n              \"snippet</p>\");\n     });\n\n     it('should escape snippet without any filter', function() {\n       expect(element(by.css('#bind-default div')).getInnerHtml()).\n         toBe(\"&lt;p style=\\\"color:blue\\\"&gt;an html\\n\" +\n              \"&lt;em onmouseover=\\\"this.textContent='PWN3D!'\\\"&gt;click here&lt;/em&gt;\\n\" +\n              \"snippet&lt;/p&gt;\");\n     });\n\n     it('should update', function() {\n       element(by.model('snippet')).clear();\n       element(by.model('snippet')).sendKeys('new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).\n         toBe('new <b>text</b>');\n       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).toBe(\n         'new <b onclick=\"alert(1)\">text</b>');\n       expect(element(by.css('#bind-default div')).getInnerHtml()).toBe(\n         \"new &lt;b onclick=\\\"alert(1)\\\"&gt;text&lt;/b&gt;\");\n     });\n   </file>\n   </example>\n */\n\n\n/**\n * @ngdoc provider\n * @name $sanitizeProvider\n *\n * @description\n * Creates and configures {@link $sanitize} instance.\n */\nfunction $SanitizeProvider() {\n  var svgEnabled = false;\n\n  this.$get = ['$$sanitizeUri', function($$sanitizeUri) {\n    if (svgEnabled) {\n      angular.extend(validElements, svgElements);\n    }\n    return function(html) {\n      var buf = [];\n      htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {\n        return !/^unsafe:/.test($$sanitizeUri(uri, isImage));\n      }));\n      return buf.join('');\n    };\n  }];\n\n\n  /**\n   * @ngdoc method\n   * @name $sanitizeProvider#enableSvg\n   * @kind function\n   *\n   * @description\n   * Enables a subset of svg to be supported by the sanitizer.\n   *\n   * <div class=\"alert alert-warning\">\n   *   <p>By enabling this setting without taking other precautions, you might expose your\n   *   application to click-hijacking attacks. In these attacks, sanitized svg elements could be positioned\n   *   outside of the containing element and be rendered over other elements on the page (e.g. a login\n   *   link). Such behavior can then result in phishing incidents.</p>\n   *\n   *   <p>To protect against these, explicitly setup `overflow: hidden` css rule for all potential svg\n   *   tags within the sanitized content:</p>\n   *\n   *   <br>\n   *\n   *   <pre><code>\n   *   .rootOfTheIncludedContent svg {\n   *     overflow: hidden !important;\n   *   }\n   *   </code></pre>\n   * </div>\n   *\n   * @param {boolean=} regexp New regexp to whitelist urls with.\n   * @returns {boolean|ng.$sanitizeProvider} Returns the currently configured value if called\n   *    without an argument or self for chaining otherwise.\n   */\n  this.enableSvg = function(enableSvg) {\n    if (angular.isDefined(enableSvg)) {\n      svgEnabled = enableSvg;\n      return this;\n    } else {\n      return svgEnabled;\n    }\n  };\n}\n\nfunction sanitizeText(chars) {\n  var buf = [];\n  var writer = htmlSanitizeWriter(buf, angular.noop);\n  writer.chars(chars);\n  return buf.join('');\n}\n\n\n// Regular Expressions for parsing tags and attributes\nvar SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\n  // Match everything outside of normal chars and \" (quote character)\n  NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n\n\n// Good source of info about elements and attributes\n// http://dev.w3.org/html5/spec/Overview.html#semantics\n// http://simon.html5.org/html-elements\n\n// Safe Void Elements - HTML5\n// http://dev.w3.org/html5/spec/Overview.html#void-elements\nvar voidElements = toMap(\"area,br,col,hr,img,wbr\");\n\n// Elements that you can, intentionally, leave open (and which close themselves)\n// http://dev.w3.org/html5/spec/Overview.html#optional-tags\nvar optionalEndTagBlockElements = toMap(\"colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr\"),\n    optionalEndTagInlineElements = toMap(\"rp,rt\"),\n    optionalEndTagElements = angular.extend({},\n                                            optionalEndTagInlineElements,\n                                            optionalEndTagBlockElements);\n\n// Safe Block Elements - HTML5\nvar blockElements = angular.extend({}, optionalEndTagBlockElements, toMap(\"address,article,\" +\n        \"aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,\" +\n        \"h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul\"));\n\n// Inline Elements - HTML5\nvar inlineElements = angular.extend({}, optionalEndTagInlineElements, toMap(\"a,abbr,acronym,b,\" +\n        \"bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,\" +\n        \"samp,small,span,strike,strong,sub,sup,time,tt,u,var\"));\n\n// SVG Elements\n// https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements\n// Note: the elements animate,animateColor,animateMotion,animateTransform,set are intentionally omitted.\n// They can potentially allow for arbitrary javascript to be executed. See #11290\nvar svgElements = toMap(\"circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,\" +\n        \"hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,\" +\n        \"radialGradient,rect,stop,svg,switch,text,title,tspan\");\n\n// Blocked Elements (will be stripped)\nvar blockedElements = toMap(\"script,style\");\n\nvar validElements = angular.extend({},\n                                   voidElements,\n                                   blockElements,\n                                   inlineElements,\n                                   optionalEndTagElements);\n\n//Attributes that have href and hence need to be sanitized\nvar uriAttrs = toMap(\"background,cite,href,longdesc,src,xlink:href\");\n\nvar htmlAttrs = toMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' +\n    'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' +\n    'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' +\n    'scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,' +\n    'valign,value,vspace,width');\n\n// SVG attributes (without \"id\" and \"name\" attributes)\n// https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes\nvar svgAttrs = toMap('accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' +\n    'baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,' +\n    'cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,' +\n    'font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,' +\n    'height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,' +\n    'marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,' +\n    'max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,' +\n    'path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,' +\n    'requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,' +\n    'stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,' +\n    'stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,' +\n    'stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,' +\n    'underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,' +\n    'width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,' +\n    'xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan', true);\n\nvar validAttrs = angular.extend({},\n                                uriAttrs,\n                                svgAttrs,\n                                htmlAttrs);\n\nfunction toMap(str, lowercaseKeys) {\n  var obj = {}, items = str.split(','), i;\n  for (i = 0; i < items.length; i++) {\n    obj[lowercaseKeys ? angular.lowercase(items[i]) : items[i]] = true;\n  }\n  return obj;\n}\n\nvar inertBodyElement;\n(function(window) {\n  var doc;\n  if (window.document && window.document.implementation) {\n    doc = window.document.implementation.createHTMLDocument(\"inert\");\n  } else {\n    throw $sanitizeMinErr('noinert', \"Can't create an inert html document\");\n  }\n  var docElement = doc.documentElement || doc.getDocumentElement();\n  var bodyElements = docElement.getElementsByTagName('body');\n\n  // usually there should be only one body element in the document, but IE doesn't have any, so we need to create one\n  if (bodyElements.length === 1) {\n    inertBodyElement = bodyElements[0];\n  } else {\n    var html = doc.createElement('html');\n    inertBodyElement = doc.createElement('body');\n    html.appendChild(inertBodyElement);\n    doc.appendChild(html);\n  }\n})(window);\n\n/**\n * @example\n * htmlParser(htmlString, {\n *     start: function(tag, attrs) {},\n *     end: function(tag) {},\n *     chars: function(text) {},\n *     comment: function(text) {}\n * });\n *\n * @param {string} html string\n * @param {object} handler\n */\nfunction htmlParser(html, handler) {\n  if (html === null || html === undefined) {\n    html = '';\n  } else if (typeof html !== 'string') {\n    html = '' + html;\n  }\n  inertBodyElement.innerHTML = html;\n\n  //mXSS protection\n  var mXSSAttempts = 5;\n  do {\n    if (mXSSAttempts === 0) {\n      throw $sanitizeMinErr('uinput', \"Failed to sanitize html because the input is unstable\");\n    }\n    mXSSAttempts--;\n\n    // strip custom-namespaced attributes on IE<=11\n    if (document.documentMode <= 11) {\n      stripCustomNsAttrs(inertBodyElement);\n    }\n    html = inertBodyElement.innerHTML; //trigger mXSS\n    inertBodyElement.innerHTML = html;\n  } while (html !== inertBodyElement.innerHTML);\n\n  var node = inertBodyElement.firstChild;\n  while (node) {\n    switch (node.nodeType) {\n      case 1: // ELEMENT_NODE\n        handler.start(node.nodeName.toLowerCase(), attrToMap(node.attributes));\n        break;\n      case 3: // TEXT NODE\n        handler.chars(node.textContent);\n        break;\n    }\n\n    var nextNode;\n    if (!(nextNode = node.firstChild)) {\n      if (node.nodeType == 1) {\n        handler.end(node.nodeName.toLowerCase());\n      }\n      nextNode = node.nextSibling;\n      if (!nextNode) {\n        while (nextNode == null) {\n          node = node.parentNode;\n          if (node === inertBodyElement) break;\n          nextNode = node.nextSibling;\n          if (node.nodeType == 1) {\n            handler.end(node.nodeName.toLowerCase());\n          }\n        }\n      }\n    }\n    node = nextNode;\n  }\n\n  while (node = inertBodyElement.firstChild) {\n    inertBodyElement.removeChild(node);\n  }\n}\n\nfunction attrToMap(attrs) {\n  var map = {};\n  for (var i = 0, ii = attrs.length; i < ii; i++) {\n    var attr = attrs[i];\n    map[attr.name] = attr.value;\n  }\n  return map;\n}\n\n\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n * @param value\n * @returns {string} escaped text\n */\nfunction encodeEntities(value) {\n  return value.\n    replace(/&/g, '&amp;').\n    replace(SURROGATE_PAIR_REGEXP, function(value) {\n      var hi = value.charCodeAt(0);\n      var low = value.charCodeAt(1);\n      return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';\n    }).\n    replace(NON_ALPHANUMERIC_REGEXP, function(value) {\n      return '&#' + value.charCodeAt(0) + ';';\n    }).\n    replace(/</g, '&lt;').\n    replace(/>/g, '&gt;');\n}\n\n/**\n * create an HTML/XML writer which writes to buffer\n * @param {Array} buf use buf.join('') to get out sanitized html string\n * @returns {object} in the form of {\n *     start: function(tag, attrs) {},\n *     end: function(tag) {},\n *     chars: function(text) {},\n *     comment: function(text) {}\n * }\n */\nfunction htmlSanitizeWriter(buf, uriValidator) {\n  var ignoreCurrentElement = false;\n  var out = angular.bind(buf, buf.push);\n  return {\n    start: function(tag, attrs) {\n      tag = angular.lowercase(tag);\n      if (!ignoreCurrentElement && blockedElements[tag]) {\n        ignoreCurrentElement = tag;\n      }\n      if (!ignoreCurrentElement && validElements[tag] === true) {\n        out('<');\n        out(tag);\n        angular.forEach(attrs, function(value, key) {\n          var lkey=angular.lowercase(key);\n          var isImage = (tag === 'img' && lkey === 'src') || (lkey === 'background');\n          if (validAttrs[lkey] === true &&\n            (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {\n            out(' ');\n            out(key);\n            out('=\"');\n            out(encodeEntities(value));\n            out('\"');\n          }\n        });\n        out('>');\n      }\n    },\n    end: function(tag) {\n      tag = angular.lowercase(tag);\n      if (!ignoreCurrentElement && validElements[tag] === true && voidElements[tag] !== true) {\n        out('</');\n        out(tag);\n        out('>');\n      }\n      if (tag == ignoreCurrentElement) {\n        ignoreCurrentElement = false;\n      }\n    },\n    chars: function(chars) {\n      if (!ignoreCurrentElement) {\n        out(encodeEntities(chars));\n      }\n    }\n  };\n}\n\n\n/**\n * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1' attribute to declare\n * ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo'). This is undesirable since we don't want\n * to allow any of these custom attributes. This method strips them all.\n *\n * @param node Root element to process\n */\nfunction stripCustomNsAttrs(node) {\n  if (node.nodeType === Node.ELEMENT_NODE) {\n    var attrs = node.attributes;\n    for (var i = 0, l = attrs.length; i < l; i++) {\n      var attrNode = attrs[i];\n      var attrName = attrNode.name.toLowerCase();\n      if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {\n        node.removeAttributeNode(attrNode);\n        i--;\n        l--;\n      }\n    }\n  }\n\n  var nextNode = node.firstChild;\n  if (nextNode) {\n    stripCustomNsAttrs(nextNode);\n  }\n\n  nextNode = node.nextSibling;\n  if (nextNode) {\n    stripCustomNsAttrs(nextNode);\n  }\n}\n\n\n\n// define ngSanitize module and register $sanitize service\nangular.module('ngSanitize', []).provider('$sanitize', $SanitizeProvider);\n\n/* global sanitizeText: false */\n\n/**\n * @ngdoc filter\n * @name linky\n * @kind function\n *\n * @description\n * Finds links in text input and turns them into html links. Supports `http/https/ftp/mailto` and\n * plain email address links.\n *\n * Requires the {@link ngSanitize `ngSanitize`} module to be installed.\n *\n * @param {string} text Input text.\n * @param {string} target Window (`_blank|_self|_parent|_top`) or named frame to open links in.\n * @param {object|function(url)} [attributes] Add custom attributes to the link element.\n *\n *    Can be one of:\n *\n *    - `object`: A map of attributes\n *    - `function`: Takes the url as a parameter and returns a map of attributes\n *\n *    If the map of attributes contains a value for `target`, it overrides the value of\n *    the target parameter.\n *\n *\n * @returns {string} Html-linkified and {@link $sanitize sanitized} text.\n *\n * @usage\n   <span ng-bind-html=\"linky_expression | linky\"></span>\n *\n * @example\n   <example module=\"linkyExample\" deps=\"angular-sanitize.js\">\n     <file name=\"index.html\">\n       <div ng-controller=\"ExampleController\">\n       Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n       <table>\n         <tr>\n           <th>Filter</th>\n           <th>Source</th>\n           <th>Rendered</th>\n         </tr>\n         <tr id=\"linky-filter\">\n           <td>linky filter</td>\n           <td>\n             <pre>&lt;div ng-bind-html=\"snippet | linky\"&gt;<br>&lt;/div&gt;</pre>\n           </td>\n           <td>\n             <div ng-bind-html=\"snippet | linky\"></div>\n           </td>\n         </tr>\n         <tr id=\"linky-target\">\n          <td>linky target</td>\n          <td>\n            <pre>&lt;div ng-bind-html=\"snippetWithSingleURL | linky:'_blank'\"&gt;<br>&lt;/div&gt;</pre>\n          </td>\n          <td>\n            <div ng-bind-html=\"snippetWithSingleURL | linky:'_blank'\"></div>\n          </td>\n         </tr>\n         <tr id=\"linky-custom-attributes\">\n          <td>linky custom attributes</td>\n          <td>\n            <pre>&lt;div ng-bind-html=\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\"&gt;<br>&lt;/div&gt;</pre>\n          </td>\n          <td>\n            <div ng-bind-html=\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\"></div>\n          </td>\n         </tr>\n         <tr id=\"escaped-html\">\n           <td>no filter</td>\n           <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br>&lt;/div&gt;</pre></td>\n           <td><div ng-bind=\"snippet\"></div></td>\n         </tr>\n       </table>\n     </file>\n     <file name=\"script.js\">\n       angular.module('linkyExample', ['ngSanitize'])\n         .controller('ExampleController', ['$scope', function($scope) {\n           $scope.snippet =\n             'Pretty text with some links:\\n'+\n             'http://angularjs.org/,\\n'+\n             'mailto:us@somewhere.org,\\n'+\n             'another@somewhere.org,\\n'+\n             'and one more: ftp://127.0.0.1/.';\n           $scope.snippetWithSingleURL = 'http://angularjs.org/';\n         }]);\n     </file>\n     <file name=\"protractor.js\" type=\"protractor\">\n       it('should linkify the snippet with urls', function() {\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);\n       });\n\n       it('should not linkify snippet without the linky filter', function() {\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).\n             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +\n                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');\n         expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);\n       });\n\n       it('should update', function() {\n         element(by.model('snippet')).clear();\n         element(by.model('snippet')).sendKeys('new http://link.');\n         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).\n             toBe('new http://link.');\n         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);\n         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())\n             .toBe('new http://link.');\n       });\n\n       it('should work with the target property', function() {\n        expect(element(by.id('linky-target')).\n            element(by.binding(\"snippetWithSingleURL | linky:'_blank'\")).getText()).\n            toBe('http://angularjs.org/');\n        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');\n       });\n\n       it('should optionally add custom attributes', function() {\n        expect(element(by.id('linky-custom-attributes')).\n            element(by.binding(\"snippetWithSingleURL | linky:'_self':{rel: 'nofollow'}\")).getText()).\n            toBe('http://angularjs.org/');\n        expect(element(by.css('#linky-custom-attributes a')).getAttribute('rel')).toEqual('nofollow');\n       });\n     </file>\n   </example>\n */\nangular.module('ngSanitize').filter('linky', ['$sanitize', function($sanitize) {\n  var LINKY_URL_REGEXP =\n        /((ftp|https?):\\/\\/|(www\\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\\S*[^\\s.;,(){}<>\"\\u201d\\u2019]/i,\n      MAILTO_REGEXP = /^mailto:/i;\n\n  var linkyMinErr = angular.$$minErr('linky');\n  var isString = angular.isString;\n\n  return function(text, target, attributes) {\n    if (text == null || text === '') return text;\n    if (!isString(text)) throw linkyMinErr('notstring', 'Expected string but received: {0}', text);\n\n    var match;\n    var raw = text;\n    var html = [];\n    var url;\n    var i;\n    while ((match = raw.match(LINKY_URL_REGEXP))) {\n      // We can not end in these as they are sometimes found at the end of the sentence\n      url = match[0];\n      // if we did not match ftp/http/www/mailto then assume mailto\n      if (!match[2] && !match[4]) {\n        url = (match[3] ? 'http://' : 'mailto:') + url;\n      }\n      i = match.index;\n      addText(raw.substr(0, i));\n      addLink(url, match[0].replace(MAILTO_REGEXP, ''));\n      raw = raw.substring(i + match[0].length);\n    }\n    addText(raw);\n    return $sanitize(html.join(''));\n\n    function addText(text) {\n      if (!text) {\n        return;\n      }\n      html.push(sanitizeText(text));\n    }\n\n    function addLink(url, text) {\n      var key;\n      html.push('<a ');\n      if (angular.isFunction(attributes)) {\n        attributes = attributes(url);\n      }\n      if (angular.isObject(attributes)) {\n        for (key in attributes) {\n          html.push(key + '=\"' + attributes[key] + '\" ');\n        }\n      } else {\n        attributes = {};\n      }\n      if (angular.isDefined(target) && !('target' in attributes)) {\n        html.push('target=\"',\n                  target,\n                  '\" ');\n      }\n      html.push('href=\"',\n                url.replace(/\"/g, '&quot;'),\n                '\">');\n      addText(text);\n      html.push('</a>');\n    }\n  };\n}]);\n\n\n})(window, window.angular);\n"]}