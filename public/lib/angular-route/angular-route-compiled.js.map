{"version":3,"sources":["angular-route.js"],"names":[],"mappings":"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","file":"angular-route-compiled.js","sourcesContent":["/**\n * @license AngularJS v1.5.0\n * (c) 2010-2016 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\n/**\n * @ngdoc module\n * @name ngRoute\n * @description\n *\n * # ngRoute\n *\n * The `ngRoute` module provides routing and deeplinking services and directives for angular apps.\n *\n * ## Example\n * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.\n *\n *\n * <div doc-module-components=\"ngRoute\"></div>\n */\n /* global -ngRouteModule */\nvar ngRouteModule = angular.module('ngRoute', ['ng']).\n                        provider('$route', $RouteProvider),\n    $routeMinErr = angular.$$minErr('ngRoute');\n\n/**\n * @ngdoc provider\n * @name $routeProvider\n *\n * @description\n *\n * Used for configuring routes.\n *\n * ## Example\n * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.\n *\n * ## Dependencies\n * Requires the {@link ngRoute `ngRoute`} module to be installed.\n */\nfunction $RouteProvider() {\n  function inherit(parent, extra) {\n    return angular.extend(Object.create(parent), extra);\n  }\n\n  var routes = {};\n\n  /**\n   * @ngdoc method\n   * @name $routeProvider#when\n   *\n   * @param {string} path Route path (matched against `$location.path`). If `$location.path`\n   *    contains redundant trailing slash or is missing one, the route will still match and the\n   *    `$location.path` will be updated to add or drop the trailing slash to exactly match the\n   *    route definition.\n   *\n   *    * `path` can contain named groups starting with a colon: e.g. `:name`. All characters up\n   *        to the next slash are matched and stored in `$routeParams` under the given `name`\n   *        when the route matches.\n   *    * `path` can contain named groups starting with a colon and ending with a star:\n   *        e.g.`:name*`. All characters are eagerly stored in `$routeParams` under the given `name`\n   *        when the route matches.\n   *    * `path` can contain optional named groups with a question mark: e.g.`:name?`.\n   *\n   *    For example, routes like `/color/:color/largecode/:largecode*\\/edit` will match\n   *    `/color/brown/largecode/code/with/slashes/edit` and extract:\n   *\n   *    * `color: brown`\n   *    * `largecode: code/with/slashes`.\n   *\n   *\n   * @param {Object} route Mapping information to be assigned to `$route.current` on route\n   *    match.\n   *\n   *    Object properties:\n   *\n   *    - `controller` – `{(string|function()=}` – Controller fn that should be associated with\n   *      newly created scope or the name of a {@link angular.Module#controller registered\n   *      controller} if passed as a string.\n   *    - `controllerAs` – `{string=}` – An identifier name for a reference to the controller.\n   *      If present, the controller will be published to scope under the `controllerAs` name.\n   *    - `template` – `{string=|function()=}` – html template as a string or a function that\n   *      returns an html template as a string which should be used by {@link\n   *      ngRoute.directive:ngView ngView} or {@link ng.directive:ngInclude ngInclude} directives.\n   *      This property takes precedence over `templateUrl`.\n   *\n   *      If `template` is a function, it will be called with the following parameters:\n   *\n   *      - `{Array.<Object>}` - route parameters extracted from the current\n   *        `$location.path()` by applying the current route\n   *\n   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html\n   *      template that should be used by {@link ngRoute.directive:ngView ngView}.\n   *\n   *      If `templateUrl` is a function, it will be called with the following parameters:\n   *\n   *      - `{Array.<Object>}` - route parameters extracted from the current\n   *        `$location.path()` by applying the current route\n   *\n   *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n   *      be injected into the controller. If any of these dependencies are promises, the router\n   *      will wait for them all to be resolved or one to be rejected before the controller is\n   *      instantiated.\n   *      If all the promises are resolved successfully, the values of the resolved promises are\n   *      injected and {@link ngRoute.$route#$routeChangeSuccess $routeChangeSuccess} event is\n   *      fired. If any of the promises are rejected the\n   *      {@link ngRoute.$route#$routeChangeError $routeChangeError} event is fired.\n   *      For easier access to the resolved dependencies from the template, the `resolve` map will\n   *      be available on the scope of the route, under `$resolve` (by default) or a custom name\n   *      specified by the `resolveAs` property (see below). This can be particularly useful, when\n   *      working with {@link angular.Module#component components} as route templates.<br />\n   *      <div class=\"alert alert-warning\">\n   *        **Note:** If your scope already contains a property with this name, it will be hidden\n   *        or overwritten. Make sure, you specify an appropriate name for this property, that\n   *        does not collide with other properties on the scope.\n   *      </div>\n   *      The map object is:\n   *\n   *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n   *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n   *        Otherwise if function, then it is {@link auto.$injector#invoke injected}\n   *        and the return value is treated as the dependency. If the result is a promise, it is\n   *        resolved before its value is injected into the controller. Be aware that\n   *        `ngRoute.$routeParams` will still refer to the previous route within these resolve\n   *        functions.  Use `$route.current.params` to access the new route parameters, instead.\n   *\n   *    - `resolveAs` - `{string=}` - The name under which the `resolve` map will be available on\n   *      the scope of the route. If omitted, defaults to `$resolve`.\n   *\n   *    - `redirectTo` – `{(string|function())=}` – value to update\n   *      {@link ng.$location $location} path with and trigger route redirection.\n   *\n   *      If `redirectTo` is a function, it will be called with the following parameters:\n   *\n   *      - `{Object.<string>}` - route parameters extracted from the current\n   *        `$location.path()` by applying the current route templateUrl.\n   *      - `{string}` - current `$location.path()`\n   *      - `{Object}` - current `$location.search()`\n   *\n   *      The custom `redirectTo` function is expected to return a string which will be used\n   *      to update `$location.path()` and `$location.search()`.\n   *\n   *    - `[reloadOnSearch=true]` - `{boolean=}` - reload route when only `$location.search()`\n   *      or `$location.hash()` changes.\n   *\n   *      If the option is set to `false` and url in the browser changes, then\n   *      `$routeUpdate` event is broadcasted on the root scope.\n   *\n   *    - `[caseInsensitiveMatch=false]` - `{boolean=}` - match routes without being case sensitive\n   *\n   *      If the option is set to `true`, then the particular route can be matched without being\n   *      case sensitive\n   *\n   * @returns {Object} self\n   *\n   * @description\n   * Adds a new route definition to the `$route` service.\n   */\n  this.when = function(path, route) {\n    //copy original route object to preserve params inherited from proto chain\n    var routeCopy = angular.copy(route);\n    if (angular.isUndefined(routeCopy.reloadOnSearch)) {\n      routeCopy.reloadOnSearch = true;\n    }\n    if (angular.isUndefined(routeCopy.caseInsensitiveMatch)) {\n      routeCopy.caseInsensitiveMatch = this.caseInsensitiveMatch;\n    }\n    routes[path] = angular.extend(\n      routeCopy,\n      path && pathRegExp(path, routeCopy)\n    );\n\n    // create redirection for trailing slashes\n    if (path) {\n      var redirectPath = (path[path.length - 1] == '/')\n            ? path.substr(0, path.length - 1)\n            : path + '/';\n\n      routes[redirectPath] = angular.extend(\n        {redirectTo: path},\n        pathRegExp(redirectPath, routeCopy)\n      );\n    }\n\n    return this;\n  };\n\n  /**\n   * @ngdoc property\n   * @name $routeProvider#caseInsensitiveMatch\n   * @description\n   *\n   * A boolean property indicating if routes defined\n   * using this provider should be matched using a case insensitive\n   * algorithm. Defaults to `false`.\n   */\n  this.caseInsensitiveMatch = false;\n\n   /**\n    * @param path {string} path\n    * @param opts {Object} options\n    * @return {?Object}\n    *\n    * @description\n    * Normalizes the given path, returning a regular expression\n    * and the original path.\n    *\n    * Inspired by pathRexp in visionmedia/express/lib/utils.js.\n    */\n  function pathRegExp(path, opts) {\n    var insensitive = opts.caseInsensitiveMatch,\n        ret = {\n          originalPath: path,\n          regexp: path\n        },\n        keys = ret.keys = [];\n\n    path = path\n      .replace(/([().])/g, '\\\\$1')\n      .replace(/(\\/)?:(\\w+)([\\?\\*])?/g, function(_, slash, key, option) {\n        var optional = option === '?' ? option : null;\n        var star = option === '*' ? option : null;\n        keys.push({ name: key, optional: !!optional });\n        slash = slash || '';\n        return ''\n          + (optional ? '' : slash)\n          + '(?:'\n          + (optional ? slash : '')\n          + (star && '(.+?)' || '([^/]+)')\n          + (optional || '')\n          + ')'\n          + (optional || '');\n      })\n      .replace(/([\\/$\\*])/g, '\\\\$1');\n\n    ret.regexp = new RegExp('^' + path + '$', insensitive ? 'i' : '');\n    return ret;\n  }\n\n  /**\n   * @ngdoc method\n   * @name $routeProvider#otherwise\n   *\n   * @description\n   * Sets route definition that will be used on route change when no other route definition\n   * is matched.\n   *\n   * @param {Object|string} params Mapping information to be assigned to `$route.current`.\n   * If called with a string, the value maps to `redirectTo`.\n   * @returns {Object} self\n   */\n  this.otherwise = function(params) {\n    if (typeof params === 'string') {\n      params = {redirectTo: params};\n    }\n    this.when(null, params);\n    return this;\n  };\n\n\n  this.$get = ['$rootScope',\n               '$location',\n               '$routeParams',\n               '$q',\n               '$injector',\n               '$templateRequest',\n               '$sce',\n      function($rootScope, $location, $routeParams, $q, $injector, $templateRequest, $sce) {\n\n    /**\n     * @ngdoc service\n     * @name $route\n     * @requires $location\n     * @requires $routeParams\n     *\n     * @property {Object} current Reference to the current route definition.\n     * The route definition contains:\n     *\n     *   - `controller`: The controller constructor as defined in the route definition.\n     *   - `locals`: A map of locals which is used by {@link ng.$controller $controller} service for\n     *     controller instantiation. The `locals` contain\n     *     the resolved values of the `resolve` map. Additionally the `locals` also contain:\n     *\n     *     - `$scope` - The current route scope.\n     *     - `$template` - The current route template HTML.\n     *\n     *     The `locals` will be assigned to the route scope's `$resolve` property. You can override\n     *     the property name, using `resolveAs` in the route definition. See\n     *     {@link ngRoute.$routeProvider $routeProvider} for more info.\n     *\n     * @property {Object} routes Object with all route configuration Objects as its properties.\n     *\n     * @description\n     * `$route` is used for deep-linking URLs to controllers and views (HTML partials).\n     * It watches `$location.url()` and tries to map the path to an existing route definition.\n     *\n     * Requires the {@link ngRoute `ngRoute`} module to be installed.\n     *\n     * You can define routes through {@link ngRoute.$routeProvider $routeProvider}'s API.\n     *\n     * The `$route` service is typically used in conjunction with the\n     * {@link ngRoute.directive:ngView `ngView`} directive and the\n     * {@link ngRoute.$routeParams `$routeParams`} service.\n     *\n     * @example\n     * This example shows how changing the URL hash causes the `$route` to match a route against the\n     * URL, and the `ngView` pulls in the partial.\n     *\n     * <example name=\"$route-service\" module=\"ngRouteExample\"\n     *          deps=\"angular-route.js\" fixBase=\"true\">\n     *   <file name=\"index.html\">\n     *     <div ng-controller=\"MainController\">\n     *       Choose:\n     *       <a href=\"Book/Moby\">Moby</a> |\n     *       <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\n     *       <a href=\"Book/Gatsby\">Gatsby</a> |\n     *       <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\n     *       <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\n     *\n     *       <div ng-view></div>\n     *\n     *       <hr />\n     *\n     *       <pre>$location.path() = {{$location.path()}}</pre>\n     *       <pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>\n     *       <pre>$route.current.params = {{$route.current.params}}</pre>\n     *       <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>\n     *       <pre>$routeParams = {{$routeParams}}</pre>\n     *     </div>\n     *   </file>\n     *\n     *   <file name=\"book.html\">\n     *     controller: {{name}}<br />\n     *     Book Id: {{params.bookId}}<br />\n     *   </file>\n     *\n     *   <file name=\"chapter.html\">\n     *     controller: {{name}}<br />\n     *     Book Id: {{params.bookId}}<br />\n     *     Chapter Id: {{params.chapterId}}\n     *   </file>\n     *\n     *   <file name=\"script.js\">\n     *     angular.module('ngRouteExample', ['ngRoute'])\n     *\n     *      .controller('MainController', function($scope, $route, $routeParams, $location) {\n     *          $scope.$route = $route;\n     *          $scope.$location = $location;\n     *          $scope.$routeParams = $routeParams;\n     *      })\n     *\n     *      .controller('BookController', function($scope, $routeParams) {\n     *          $scope.name = \"BookController\";\n     *          $scope.params = $routeParams;\n     *      })\n     *\n     *      .controller('ChapterController', function($scope, $routeParams) {\n     *          $scope.name = \"ChapterController\";\n     *          $scope.params = $routeParams;\n     *      })\n     *\n     *     .config(function($routeProvider, $locationProvider) {\n     *       $routeProvider\n     *        .when('/Book/:bookId', {\n     *         templateUrl: 'book.html',\n     *         controller: 'BookController',\n     *         resolve: {\n     *           // I will cause a 1 second delay\n     *           delay: function($q, $timeout) {\n     *             var delay = $q.defer();\n     *             $timeout(delay.resolve, 1000);\n     *             return delay.promise;\n     *           }\n     *         }\n     *       })\n     *       .when('/Book/:bookId/ch/:chapterId', {\n     *         templateUrl: 'chapter.html',\n     *         controller: 'ChapterController'\n     *       });\n     *\n     *       // configure html5 to get links working on jsfiddle\n     *       $locationProvider.html5Mode(true);\n     *     });\n     *\n     *   </file>\n     *\n     *   <file name=\"protractor.js\" type=\"protractor\">\n     *     it('should load and compile correct template', function() {\n     *       element(by.linkText('Moby: Ch1')).click();\n     *       var content = element(by.css('[ng-view]')).getText();\n     *       expect(content).toMatch(/controller\\: ChapterController/);\n     *       expect(content).toMatch(/Book Id\\: Moby/);\n     *       expect(content).toMatch(/Chapter Id\\: 1/);\n     *\n     *       element(by.partialLinkText('Scarlet')).click();\n     *\n     *       content = element(by.css('[ng-view]')).getText();\n     *       expect(content).toMatch(/controller\\: BookController/);\n     *       expect(content).toMatch(/Book Id\\: Scarlet/);\n     *     });\n     *   </file>\n     * </example>\n     */\n\n    /**\n     * @ngdoc event\n     * @name $route#$routeChangeStart\n     * @eventType broadcast on root scope\n     * @description\n     * Broadcasted before a route change. At this  point the route services starts\n     * resolving all of the dependencies needed for the route change to occur.\n     * Typically this involves fetching the view template as well as any dependencies\n     * defined in `resolve` route property. Once  all of the dependencies are resolved\n     * `$routeChangeSuccess` is fired.\n     *\n     * The route change (and the `$location` change that triggered it) can be prevented\n     * by calling `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on}\n     * for more details about event object.\n     *\n     * @param {Object} angularEvent Synthetic event object.\n     * @param {Route} next Future route information.\n     * @param {Route} current Current route information.\n     */\n\n    /**\n     * @ngdoc event\n     * @name $route#$routeChangeSuccess\n     * @eventType broadcast on root scope\n     * @description\n     * Broadcasted after a route change has happened successfully.\n     * The `resolve` dependencies are now available in the `current.locals` property.\n     *\n     * {@link ngRoute.directive:ngView ngView} listens for the directive\n     * to instantiate the controller and render the view.\n     *\n     * @param {Object} angularEvent Synthetic event object.\n     * @param {Route} current Current route information.\n     * @param {Route|Undefined} previous Previous route information, or undefined if current is\n     * first route entered.\n     */\n\n    /**\n     * @ngdoc event\n     * @name $route#$routeChangeError\n     * @eventType broadcast on root scope\n     * @description\n     * Broadcasted if any of the resolve promises are rejected.\n     *\n     * @param {Object} angularEvent Synthetic event object\n     * @param {Route} current Current route information.\n     * @param {Route} previous Previous route information.\n     * @param {Route} rejection Rejection of the promise. Usually the error of the failed promise.\n     */\n\n    /**\n     * @ngdoc event\n     * @name $route#$routeUpdate\n     * @eventType broadcast on root scope\n     * @description\n     * The `reloadOnSearch` property has been set to false, and we are reusing the same\n     * instance of the Controller.\n     *\n     * @param {Object} angularEvent Synthetic event object\n     * @param {Route} current Current/previous route information.\n     */\n\n    var forceReload = false,\n        preparedRoute,\n        preparedRouteIsUpdateOnly,\n        $route = {\n          routes: routes,\n\n          /**\n           * @ngdoc method\n           * @name $route#reload\n           *\n           * @description\n           * Causes `$route` service to reload the current route even if\n           * {@link ng.$location $location} hasn't changed.\n           *\n           * As a result of that, {@link ngRoute.directive:ngView ngView}\n           * creates new scope and reinstantiates the controller.\n           */\n          reload: function() {\n            forceReload = true;\n\n            var fakeLocationEvent = {\n              defaultPrevented: false,\n              preventDefault: function fakePreventDefault() {\n                this.defaultPrevented = true;\n                forceReload = false;\n              }\n            };\n\n            $rootScope.$evalAsync(function() {\n              prepareRoute(fakeLocationEvent);\n              if (!fakeLocationEvent.defaultPrevented) commitRoute();\n            });\n          },\n\n          /**\n           * @ngdoc method\n           * @name $route#updateParams\n           *\n           * @description\n           * Causes `$route` service to update the current URL, replacing\n           * current route parameters with those specified in `newParams`.\n           * Provided property names that match the route's path segment\n           * definitions will be interpolated into the location's path, while\n           * remaining properties will be treated as query params.\n           *\n           * @param {!Object<string, string>} newParams mapping of URL parameter names to values\n           */\n          updateParams: function(newParams) {\n            if (this.current && this.current.$$route) {\n              newParams = angular.extend({}, this.current.params, newParams);\n              $location.path(interpolate(this.current.$$route.originalPath, newParams));\n              // interpolate modifies newParams, only query params are left\n              $location.search(newParams);\n            } else {\n              throw $routeMinErr('norout', 'Tried updating route when with no current route');\n            }\n          }\n        };\n\n    $rootScope.$on('$locationChangeStart', prepareRoute);\n    $rootScope.$on('$locationChangeSuccess', commitRoute);\n\n    return $route;\n\n    /////////////////////////////////////////////////////\n\n    /**\n     * @param on {string} current url\n     * @param route {Object} route regexp to match the url against\n     * @return {?Object}\n     *\n     * @description\n     * Check if the route matches the current url.\n     *\n     * Inspired by match in\n     * visionmedia/express/lib/router/router.js.\n     */\n    function switchRouteMatcher(on, route) {\n      var keys = route.keys,\n          params = {};\n\n      if (!route.regexp) return null;\n\n      var m = route.regexp.exec(on);\n      if (!m) return null;\n\n      for (var i = 1, len = m.length; i < len; ++i) {\n        var key = keys[i - 1];\n\n        var val = m[i];\n\n        if (key && val) {\n          params[key.name] = val;\n        }\n      }\n      return params;\n    }\n\n    function prepareRoute($locationEvent) {\n      var lastRoute = $route.current;\n\n      preparedRoute = parseRoute();\n      preparedRouteIsUpdateOnly = preparedRoute && lastRoute && preparedRoute.$$route === lastRoute.$$route\n          && angular.equals(preparedRoute.pathParams, lastRoute.pathParams)\n          && !preparedRoute.reloadOnSearch && !forceReload;\n\n      if (!preparedRouteIsUpdateOnly && (lastRoute || preparedRoute)) {\n        if ($rootScope.$broadcast('$routeChangeStart', preparedRoute, lastRoute).defaultPrevented) {\n          if ($locationEvent) {\n            $locationEvent.preventDefault();\n          }\n        }\n      }\n    }\n\n    function commitRoute() {\n      var lastRoute = $route.current;\n      var nextRoute = preparedRoute;\n\n      if (preparedRouteIsUpdateOnly) {\n        lastRoute.params = nextRoute.params;\n        angular.copy(lastRoute.params, $routeParams);\n        $rootScope.$broadcast('$routeUpdate', lastRoute);\n      } else if (nextRoute || lastRoute) {\n        forceReload = false;\n        $route.current = nextRoute;\n        if (nextRoute) {\n          if (nextRoute.redirectTo) {\n            if (angular.isString(nextRoute.redirectTo)) {\n              $location.path(interpolate(nextRoute.redirectTo, nextRoute.params)).search(nextRoute.params)\n                       .replace();\n            } else {\n              $location.url(nextRoute.redirectTo(nextRoute.pathParams, $location.path(), $location.search()))\n                       .replace();\n            }\n          }\n        }\n\n        $q.when(nextRoute).\n          then(function() {\n            if (nextRoute) {\n              var locals = angular.extend({}, nextRoute.resolve),\n                  template, templateUrl;\n\n              angular.forEach(locals, function(value, key) {\n                locals[key] = angular.isString(value) ?\n                    $injector.get(value) : $injector.invoke(value, null, null, key);\n              });\n\n              if (angular.isDefined(template = nextRoute.template)) {\n                if (angular.isFunction(template)) {\n                  template = template(nextRoute.params);\n                }\n              } else if (angular.isDefined(templateUrl = nextRoute.templateUrl)) {\n                if (angular.isFunction(templateUrl)) {\n                  templateUrl = templateUrl(nextRoute.params);\n                }\n                if (angular.isDefined(templateUrl)) {\n                  nextRoute.loadedTemplateUrl = $sce.valueOf(templateUrl);\n                  template = $templateRequest(templateUrl);\n                }\n              }\n              if (angular.isDefined(template)) {\n                locals['$template'] = template;\n              }\n              return $q.all(locals);\n            }\n          }).\n          then(function(locals) {\n            // after route change\n            if (nextRoute == $route.current) {\n              if (nextRoute) {\n                nextRoute.locals = locals;\n                angular.copy(nextRoute.params, $routeParams);\n              }\n              $rootScope.$broadcast('$routeChangeSuccess', nextRoute, lastRoute);\n            }\n          }, function(error) {\n            if (nextRoute == $route.current) {\n              $rootScope.$broadcast('$routeChangeError', nextRoute, lastRoute, error);\n            }\n          });\n      }\n    }\n\n\n    /**\n     * @returns {Object} the current active route, by matching it against the URL\n     */\n    function parseRoute() {\n      // Match a route\n      var params, match;\n      angular.forEach(routes, function(route, path) {\n        if (!match && (params = switchRouteMatcher($location.path(), route))) {\n          match = inherit(route, {\n            params: angular.extend({}, $location.search(), params),\n            pathParams: params});\n          match.$$route = route;\n        }\n      });\n      // No route matched; fallback to \"otherwise\" route\n      return match || routes[null] && inherit(routes[null], {params: {}, pathParams:{}});\n    }\n\n    /**\n     * @returns {string} interpolation of the redirect path with the parameters\n     */\n    function interpolate(string, params) {\n      var result = [];\n      angular.forEach((string || '').split(':'), function(segment, i) {\n        if (i === 0) {\n          result.push(segment);\n        } else {\n          var segmentMatch = segment.match(/(\\w+)(?:[?*])?(.*)/);\n          var key = segmentMatch[1];\n          result.push(params[key]);\n          result.push(segmentMatch[2] || '');\n          delete params[key];\n        }\n      });\n      return result.join('');\n    }\n  }];\n}\n\nngRouteModule.provider('$routeParams', $RouteParamsProvider);\n\n\n/**\n * @ngdoc service\n * @name $routeParams\n * @requires $route\n *\n * @description\n * The `$routeParams` service allows you to retrieve the current set of route parameters.\n *\n * Requires the {@link ngRoute `ngRoute`} module to be installed.\n *\n * The route parameters are a combination of {@link ng.$location `$location`}'s\n * {@link ng.$location#search `search()`} and {@link ng.$location#path `path()`}.\n * The `path` parameters are extracted when the {@link ngRoute.$route `$route`} path is matched.\n *\n * In case of parameter name collision, `path` params take precedence over `search` params.\n *\n * The service guarantees that the identity of the `$routeParams` object will remain unchanged\n * (but its properties will likely change) even when a route change occurs.\n *\n * Note that the `$routeParams` are only updated *after* a route change completes successfully.\n * This means that you cannot rely on `$routeParams` being correct in route resolve functions.\n * Instead you can use `$route.current.params` to access the new route's parameters.\n *\n * @example\n * ```js\n *  // Given:\n *  // URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby\n *  // Route: /Chapter/:chapterId/Section/:sectionId\n *  //\n *  // Then\n *  $routeParams ==> {chapterId:'1', sectionId:'2', search:'moby'}\n * ```\n */\nfunction $RouteParamsProvider() {\n  this.$get = function() { return {}; };\n}\n\nngRouteModule.directive('ngView', ngViewFactory);\nngRouteModule.directive('ngView', ngViewFillContentFactory);\n\n\n/**\n * @ngdoc directive\n * @name ngView\n * @restrict ECA\n *\n * @description\n * # Overview\n * `ngView` is a directive that complements the {@link ngRoute.$route $route} service by\n * including the rendered template of the current route into the main layout (`index.html`) file.\n * Every time the current route changes, the included view changes with it according to the\n * configuration of the `$route` service.\n *\n * Requires the {@link ngRoute `ngRoute`} module to be installed.\n *\n * @animations\n * enter - animation is used to bring new content into the browser.\n * leave - animation is used to animate existing content away.\n *\n * The enter and leave animation occur concurrently.\n *\n * @scope\n * @priority 400\n * @param {string=} onload Expression to evaluate whenever the view updates.\n *\n * @param {string=} autoscroll Whether `ngView` should call {@link ng.$anchorScroll\n *                  $anchorScroll} to scroll the viewport after the view is updated.\n *\n *                  - If the attribute is not set, disable scrolling.\n *                  - If the attribute is set without value, enable scrolling.\n *                  - Otherwise enable scrolling only if the `autoscroll` attribute value evaluated\n *                    as an expression yields a truthy value.\n * @example\n    <example name=\"ngView-directive\" module=\"ngViewExample\"\n             deps=\"angular-route.js;angular-animate.js\"\n             animations=\"true\" fixBase=\"true\">\n      <file name=\"index.html\">\n        <div ng-controller=\"MainCtrl as main\">\n          Choose:\n          <a href=\"Book/Moby\">Moby</a> |\n          <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\n          <a href=\"Book/Gatsby\">Gatsby</a> |\n          <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\n          <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\n\n          <div class=\"view-animate-container\">\n            <div ng-view class=\"view-animate\"></div>\n          </div>\n          <hr />\n\n          <pre>$location.path() = {{main.$location.path()}}</pre>\n          <pre>$route.current.templateUrl = {{main.$route.current.templateUrl}}</pre>\n          <pre>$route.current.params = {{main.$route.current.params}}</pre>\n          <pre>$routeParams = {{main.$routeParams}}</pre>\n        </div>\n      </file>\n\n      <file name=\"book.html\">\n        <div>\n          controller: {{book.name}}<br />\n          Book Id: {{book.params.bookId}}<br />\n        </div>\n      </file>\n\n      <file name=\"chapter.html\">\n        <div>\n          controller: {{chapter.name}}<br />\n          Book Id: {{chapter.params.bookId}}<br />\n          Chapter Id: {{chapter.params.chapterId}}\n        </div>\n      </file>\n\n      <file name=\"animations.css\">\n        .view-animate-container {\n          position:relative;\n          height:100px!important;\n          background:white;\n          border:1px solid black;\n          height:40px;\n          overflow:hidden;\n        }\n\n        .view-animate {\n          padding:10px;\n        }\n\n        .view-animate.ng-enter, .view-animate.ng-leave {\n          transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;\n\n          display:block;\n          width:100%;\n          border-left:1px solid black;\n\n          position:absolute;\n          top:0;\n          left:0;\n          right:0;\n          bottom:0;\n          padding:10px;\n        }\n\n        .view-animate.ng-enter {\n          left:100%;\n        }\n        .view-animate.ng-enter.ng-enter-active {\n          left:0;\n        }\n        .view-animate.ng-leave.ng-leave-active {\n          left:-100%;\n        }\n      </file>\n\n      <file name=\"script.js\">\n        angular.module('ngViewExample', ['ngRoute', 'ngAnimate'])\n          .config(['$routeProvider', '$locationProvider',\n            function($routeProvider, $locationProvider) {\n              $routeProvider\n                .when('/Book/:bookId', {\n                  templateUrl: 'book.html',\n                  controller: 'BookCtrl',\n                  controllerAs: 'book'\n                })\n                .when('/Book/:bookId/ch/:chapterId', {\n                  templateUrl: 'chapter.html',\n                  controller: 'ChapterCtrl',\n                  controllerAs: 'chapter'\n                });\n\n              $locationProvider.html5Mode(true);\n          }])\n          .controller('MainCtrl', ['$route', '$routeParams', '$location',\n            function($route, $routeParams, $location) {\n              this.$route = $route;\n              this.$location = $location;\n              this.$routeParams = $routeParams;\n          }])\n          .controller('BookCtrl', ['$routeParams', function($routeParams) {\n            this.name = \"BookCtrl\";\n            this.params = $routeParams;\n          }])\n          .controller('ChapterCtrl', ['$routeParams', function($routeParams) {\n            this.name = \"ChapterCtrl\";\n            this.params = $routeParams;\n          }]);\n\n      </file>\n\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should load and compile correct template', function() {\n          element(by.linkText('Moby: Ch1')).click();\n          var content = element(by.css('[ng-view]')).getText();\n          expect(content).toMatch(/controller\\: ChapterCtrl/);\n          expect(content).toMatch(/Book Id\\: Moby/);\n          expect(content).toMatch(/Chapter Id\\: 1/);\n\n          element(by.partialLinkText('Scarlet')).click();\n\n          content = element(by.css('[ng-view]')).getText();\n          expect(content).toMatch(/controller\\: BookCtrl/);\n          expect(content).toMatch(/Book Id\\: Scarlet/);\n        });\n      </file>\n    </example>\n */\n\n\n/**\n * @ngdoc event\n * @name ngView#$viewContentLoaded\n * @eventType emit on the current ngView scope\n * @description\n * Emitted every time the ngView content is reloaded.\n */\nngViewFactory.$inject = ['$route', '$anchorScroll', '$animate'];\nfunction ngViewFactory($route, $anchorScroll, $animate) {\n  return {\n    restrict: 'ECA',\n    terminal: true,\n    priority: 400,\n    transclude: 'element',\n    link: function(scope, $element, attr, ctrl, $transclude) {\n        var currentScope,\n            currentElement,\n            previousLeaveAnimation,\n            autoScrollExp = attr.autoscroll,\n            onloadExp = attr.onload || '';\n\n        scope.$on('$routeChangeSuccess', update);\n        update();\n\n        function cleanupLastView() {\n          if (previousLeaveAnimation) {\n            $animate.cancel(previousLeaveAnimation);\n            previousLeaveAnimation = null;\n          }\n\n          if (currentScope) {\n            currentScope.$destroy();\n            currentScope = null;\n          }\n          if (currentElement) {\n            previousLeaveAnimation = $animate.leave(currentElement);\n            previousLeaveAnimation.then(function() {\n              previousLeaveAnimation = null;\n            });\n            currentElement = null;\n          }\n        }\n\n        function update() {\n          var locals = $route.current && $route.current.locals,\n              template = locals && locals.$template;\n\n          if (angular.isDefined(template)) {\n            var newScope = scope.$new();\n            var current = $route.current;\n\n            // Note: This will also link all children of ng-view that were contained in the original\n            // html. If that content contains controllers, ... they could pollute/change the scope.\n            // However, using ng-view on an element with additional content does not make sense...\n            // Note: We can't remove them in the cloneAttchFn of $transclude as that\n            // function is called before linking the content, which would apply child\n            // directives to non existing elements.\n            var clone = $transclude(newScope, function(clone) {\n              $animate.enter(clone, null, currentElement || $element).then(function onNgViewEnter() {\n                if (angular.isDefined(autoScrollExp)\n                  && (!autoScrollExp || scope.$eval(autoScrollExp))) {\n                  $anchorScroll();\n                }\n              });\n              cleanupLastView();\n            });\n\n            currentElement = clone;\n            currentScope = current.scope = newScope;\n            currentScope.$emit('$viewContentLoaded');\n            currentScope.$eval(onloadExp);\n          } else {\n            cleanupLastView();\n          }\n        }\n    }\n  };\n}\n\n// This directive is called during the $transclude call of the first `ngView` directive.\n// It will replace and compile the content of the element with the loaded template.\n// We need this directive so that the element content is already filled when\n// the link function of another directive on the same element as ngView\n// is called.\nngViewFillContentFactory.$inject = ['$compile', '$controller', '$route'];\nfunction ngViewFillContentFactory($compile, $controller, $route) {\n  return {\n    restrict: 'ECA',\n    priority: -400,\n    link: function(scope, $element) {\n      var current = $route.current,\n          locals = current.locals;\n\n      $element.html(locals.$template);\n\n      var link = $compile($element.contents());\n\n      if (current.controller) {\n        locals.$scope = scope;\n        var controller = $controller(current.controller, locals);\n        if (current.controllerAs) {\n          scope[current.controllerAs] = controller;\n        }\n        $element.data('$ngControllerController', controller);\n        $element.children().data('$ngControllerController', controller);\n      }\n      scope[current.resolveAs || '$resolve'] = locals;\n\n      link(scope);\n    }\n  };\n}\n\n\n})(window, window.angular);\n"]}