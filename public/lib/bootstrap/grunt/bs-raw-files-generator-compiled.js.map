{"version":3,"sources":["bs-raw-files-generator.js"],"names":[],"mappings":";;;;;;;AAOA;;AAEA,IAAI,KAAK,QAAQ,IAAR,CAAL;AACJ,IAAI,OAAO,QAAQ,MAAR,CAAP;AACJ,IAAI,OAAO,QAAQ,MAAR,CAAP;;AAEJ,SAAS,QAAT,CAAkB,IAAlB,EAAwB;AACtB,MAAI,QAAQ,EAAR,CADkB;AAEtB,MAAI,YAAY,SAAS,MAAT,CAFM;AAGtB,MAAI,WAAW,YAAY,OAAZ,GAAsB,IAAtB,CAHO;AAItB,OAAK,IAAL,CAAU,OAAO,QAAP,CAAV,CACG,MADH,CACU,UAAU,IAAV,EAAgB;AACtB,WAAO,SAAS,OAAT,GAAmB,IAAnB,GAA0B,IAAI,MAAJ,CAAW,QAAQ,IAAR,GAAe,GAAf,CAAX,CAA+B,IAA/B,CAAoC,IAApC,CAA1B,CADe;GAAhB,CADV,CAIG,OAJH,CAIW,UAAU,QAAV,EAAoB;AAC3B,QAAI,eAAe,SAAS,OAAT,CAAiB,UAAjB,EAA6B,EAA7B,CAAf,CADuB;AAE3B,UAAM,YAAN,IAAsB,SAAS,OAAT,GAAmB,KAAK,GAAG,YAAH,CAAgB,QAAhB,CAAL,CAAnB,GAAqD,GAAG,YAAH,CAAgB,QAAhB,EAA0B,MAA1B,CAArD,CAFK;GAApB,CAJX,CAJsB;AAYtB,SAAO,WAAW,IAAX,GAAkB,KAAlB,GAA0B,KAAK,SAAL,CAAe,KAAf,CAA1B,GAAkD,IAAlD,CAZe;CAAxB;;AAeA,OAAO,OAAP,GAAiB,SAAS,kBAAT,CAA4B,KAA5B,EAAmC,MAAnC,EAA2C;AAC1D,MAAI,CAAC,MAAD,EAAS;AACX,aAAS,EAAT,CADW;GAAb;AAGA,MAAI,OAAO,CAAC,IAAD,EAAO,MAAP,EAAe,OAAf,CAAP,CAJsD;AAK1D,MAAI,QAAQ,SAAS,KAAK,GAAL,CAAS,QAAT,EAAmB,MAAnB,CAA0B,UAAU,QAAV,EAAoB,IAApB,EAA0B;AACvE,WAAO,WAAW,IAAX,CADgE;GAA1B,EAE5C,EAFkB,CAAT,CAL8C;AAQ1D,MAAI,aAAa,iCAAb,CARsD;AAS1D,MAAI;AACF,OAAG,aAAH,CAAiB,UAAjB,EAA6B,KAA7B,EADE;GAAJ,CAEE,OAAO,GAAP,EAAY;AACZ,UAAM,IAAN,CAAW,IAAX,CAAgB,GAAhB,EADY;GAAZ;AAGF,QAAM,GAAN,CAAU,OAAV,CAAkB,UAAU,WAAW,IAAX,GAAkB,WAA5B,CAAlB,CAd0D;CAA3C","file":"bs-raw-files-generator-compiled.js","sourcesContent":["/*!\n * Bootstrap Grunt task for generating raw-files.min.js for the Customizer\n * http://getbootstrap.com\n * Copyright 2014-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */\n\n'use strict';\n\nvar fs = require('fs');\nvar btoa = require('btoa');\nvar glob = require('glob');\n\nfunction getFiles(type) {\n  var files = {};\n  var recursive = type === 'less';\n  var globExpr = recursive ? '/**/*' : '/*';\n  glob.sync(type + globExpr)\n    .filter(function (path) {\n      return type === 'fonts' ? true : new RegExp('\\\\.' + type + '$').test(path);\n    })\n    .forEach(function (fullPath) {\n      var relativePath = fullPath.replace(/^[^/]+\\//, '');\n      files[relativePath] = type === 'fonts' ? btoa(fs.readFileSync(fullPath)) : fs.readFileSync(fullPath, 'utf8');\n    });\n  return 'var __' + type + ' = ' + JSON.stringify(files) + '\\n';\n}\n\nmodule.exports = function generateRawFilesJs(grunt, banner) {\n  if (!banner) {\n    banner = '';\n  }\n  var dirs = ['js', 'less', 'fonts'];\n  var files = banner + dirs.map(getFiles).reduce(function (combined, file) {\n    return combined + file;\n  }, '');\n  var rawFilesJs = 'docs/assets/js/raw-files.min.js';\n  try {\n    fs.writeFileSync(rawFilesJs, files);\n  } catch (err) {\n    grunt.fail.warn(err);\n  }\n  grunt.log.writeln('File ' + rawFilesJs.cyan + ' created.');\n};\n"]}