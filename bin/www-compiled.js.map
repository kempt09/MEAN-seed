{"version":3,"sources":["www"],"names":[],"mappings":";;;;;;AAMA,IAAI,MAAM,QAAQ,QAAR,CAAN;AACJ,IAAI,QAAQ,QAAQ,OAAR,EAAiB,qBAAjB,CAAR;AACJ,IAAI,OAAO,QAAQ,MAAR,CAAP;;;;;;AAMJ,IAAI,OAAO,cAAc,QAAQ,GAAR,CAAY,IAAZ,IAAoB,MAApB,CAArB;AACJ,IAAI,GAAJ,CAAQ,MAAR,EAAgB,IAAhB;;;;;;AAMA,IAAI,SAAS,KAAK,YAAL,CAAkB,GAAlB,CAAT;;;;;;AAMJ,OAAO,MAAP,CAAc,IAAd;AACA,OAAO,EAAP,CAAU,OAAV,EAAmB,OAAnB;AACA,OAAO,EAAP,CAAU,WAAV,EAAuB,WAAvB;;;;;;AAMA,SAAS,aAAT,CAAuB,GAAvB,EAA4B;AAC1B,MAAI,OAAO,SAAS,GAAT,EAAc,EAAd,CAAP,CADsB;;AAG1B,MAAI,MAAM,IAAN,CAAJ,EAAiB;;AAEf,WAAO,GAAP,CAFe;GAAjB;;AAKA,MAAI,QAAQ,CAAR,EAAW;;AAEb,WAAO,IAAP,CAFa;GAAf;;AAKA,SAAO,KAAP,CAb0B;CAA5B;;;;;;AAoBA,SAAS,OAAT,CAAiB,KAAjB,EAAwB;AACtB,MAAI,MAAM,OAAN,KAAkB,QAAlB,EAA4B;AAC9B,UAAM,KAAN,CAD8B;GAAhC;;AAIA,MAAI,OAAO,OAAO,IAAP,KAAgB,QAAhB,GACP,UAAU,IAAV,GACA,UAAU,IAAV;;;AAPkB,UAUd,MAAM,IAAN;AACN,SAAK,QAAL;AACE,cAAQ,KAAR,CAAc,OAAO,+BAAP,CAAd,CADF;AAEE,cAAQ,IAAR,CAAa,CAAb,EAFF;AAGE,YAHF;AADF,SAKO,YAAL;AACE,cAAQ,KAAR,CAAc,OAAO,oBAAP,CAAd,CADF;AAEE,cAAQ,IAAR,CAAa,CAAb,EAFF;AAGE,YAHF;AALF;AAUI,YAAM,KAAN,CADF;AATF,GAVsB;CAAxB;;;;;;AA4BA,SAAS,WAAT,GAAuB;AACrB,MAAI,OAAO,OAAO,OAAP,EAAP,CADiB;AAErB,MAAI,OAAO,OAAO,IAAP,KAAgB,QAAhB,GACP,UAAU,IAAV,GACA,UAAU,KAAK,IAAL,CAJO;AAKrB,QAAM,kBAAkB,IAAlB,CAAN,CALqB;CAAvB","file":"www-compiled.js","sourcesContent":["#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nvar app = require('../app');\nvar debug = require('debug')('nodePractice:server');\nvar http = require('http');\n\n/**\n * Get port from environment and store in Express.\n */\n\nvar port = normalizePort(process.env.PORT || '8080');\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\n\nvar server = http.createServer(app);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  var port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  var bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n  var addr = server.address();\n  var bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n  debug('Listening on ' + bind);\n}\n"]}